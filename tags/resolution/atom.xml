<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh">
    <title>Lei&#x27;s Blog - resolution</title>
    <link rel="self" type="application/atom+xml" href="https://blog.dotone.top/tags/resolution/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://blog.dotone.top"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2021-10-10T00:00:00+00:00</updated>
    <id>https://blog.dotone.top/tags/resolution/atom.xml</id>
    <entry xml:lang="zh">
        <title>Windows timer resolution</title>
        <published>2021-10-10T00:00:00+00:00</published>
        <updated>2021-10-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.dotone.top/blog/it/windows-timer-resolution/"/>
        <id>https://blog.dotone.top/blog/it/windows-timer-resolution/</id>
        
        <content type="html" xml:base="https://blog.dotone.top/blog/it/windows-timer-resolution/">&lt;p&gt;Recently I noticed that the author of libplctagresolved an &lt;a href=&quot;https:&#x2F;&#x2F;blog.dotone.top&#x2F;blog&#x2F;it&#x2F;windows-timer-resolution&#x2F;(https:&#x2F;&#x2F;github.com&#x2F;libplctag&#x2F;libplctag&#x2F;issues&#x2F;260)&quot;&gt;issue&lt;&#x2F;a&gt; with &lt;code&gt;timeBeginPeriod()&lt;&#x2F;code&gt;. It&#x27;s interesting to learn what happened and timer resolution.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;timer-resolution&quot;&gt;Timer resolution&lt;&#x2F;h2&gt;
&lt;p&gt;The system timer resolution determines how frequently Windows performs two main actions:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Update the timer tick count if a full tick has elapsed.&lt;&#x2F;li&gt;
&lt;li&gt;Check whether a scheduled timer object has expired.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;On Windows 7, the default timer resolution is 15.6 ms.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s say sleep for 50ms, it would have its time delay rounded to some multiple of the tick frequency.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;view-system-clock-resolution&quot;&gt;View system clock resolution&lt;&#x2F;h2&gt;
&lt;p&gt;To view your system clock resolution, you need the &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;sysinternals&#x2F;downloads&#x2F;clockres&quot;&gt;clockres&lt;&#x2F;a&gt; tool by sysinternals.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Clockres v2.1 - Clock resolution display utility
&lt;&#x2F;span&gt;&lt;span&gt;Copyright (C) 2016 Mark Russinovich
&lt;&#x2F;span&gt;&lt;span&gt;Sysinternals
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Maximum timer interval: 15.625 ms
&lt;&#x2F;span&gt;&lt;span&gt;Minimum timer interval: 0.500 ms
&lt;&#x2F;span&gt;&lt;span&gt;Current timer interval: 0.997 ms
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It said that it uses &lt;code&gt;GetSystemTimeAdjustment()&lt;&#x2F;code&gt; function.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;timebeginperiod&quot;&gt;&lt;code&gt;timeBeginPeriod()&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;As &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;multimedia&#x2F;timer-resolution?redirectedfrom=MSDN&quot;&gt;the doc&lt;&#x2F;a&gt; said, &lt;code&gt;timeBeginPeriod()&lt;&#x2F;code&gt; allows you requests a minimum resolution for periodic timers. And you must call this function before using timer services. &lt;code&gt;timeBeginPeriod()&lt;&#x2F;code&gt; should be paired with &lt;code&gt;timeEndPeriod()&lt;&#x2F;code&gt;, and they can be nested.&lt;&#x2F;p&gt;
&lt;p&gt;The effect of this function:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Before Windows 10, version 2004&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;affects global windows setting&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;From Windows 10, version 2004&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;for processes that call this function, windows use lowest value requested by any process; For processes which have not called this function, Windows does not guarantee a higher resolution than the default system resolution&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;From Windows 11&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;if a window-owning process becomes fully occluded, minimized, or otherwise invisible or inaudible to the end user, Windows does not guarantee a higher resolution than the default system resolution&lt;&#x2F;p&gt;
&lt;p&gt;The doc also suggest to look at &lt;code&gt;SetProcessInformation()&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;setprocessinformation&quot;&gt;&lt;code&gt;SetProcessInformation()&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;SetProcessInformation()&lt;&#x2F;code&gt; is available from Windows 8.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;ProcessPowerThrottling enables throttling policies on a process, which can be used to balance out performance and power efficiency in cases where optimal performance is not required&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;when a process enabling PROCESS_POWER_THROTTLING_EXECUTION_SPEED
the process will be classified as EcoQoS (before Windows 11, labeled as LowQoS).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;if does not explicitly enable PROCESS_POWER_THROTTLING_EXECUTION_SPEED
the system will use its own heuristics to automatically infer a Quality of Service level.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;In Windows 11, if a window-owning process becomes fully occluded, minimized, or otherwise invisible or inaudible to the end user, Windows may automatically ignore the timer resolution request.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;high-precision-timing&quot;&gt;High-precision timing&lt;&#x2F;h2&gt;
&lt;p&gt;Another topic related to timer resolution is high-precision timing.
Some referenced articles described how to get high-precision timing.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Function&lt;&#x2F;th&gt;&lt;th&gt;precision&lt;&#x2F;th&gt;&lt;th&gt;accuracy&lt;&#x2F;th&gt;&lt;th&gt;comments&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;GetTickCount&lt;&#x2F;td&gt;&lt;td&gt;1ms&lt;&#x2F;td&gt;&lt;td&gt;10ms-55ms&lt;&#x2F;td&gt;&lt;td&gt;-&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;GetSystemTimeAsFileTime&lt;&#x2F;td&gt;&lt;td&gt;100ns&lt;&#x2F;td&gt;&lt;td&gt;not better than GetTickCount&lt;&#x2F;td&gt;&lt;td&gt;-&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;QueryPerformanceCounter&lt;&#x2F;td&gt;&lt;td&gt;1 microsecond or better&lt;&#x2F;td&gt;&lt;td&gt;-&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;GetSystemTimePreciseAsFileTime&lt;&#x2F;td&gt;&lt;td&gt;the highest possible level of precision (&amp;lt;1us)&lt;&#x2F;td&gt;&lt;td&gt;-&lt;&#x2F;td&gt;&lt;td&gt;in Coordinated Universal Time (UTC) format&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Someone said QPC is not reliable, and must run on the same processor core with thread affinity. But microsoft claims that &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;sysinfo&#x2F;acquiring-high-resolution-time-stamps#faq-about-programming-with-qpc-and-tsc&quot;&gt;thread affinity is  not need as this might affect your application&#x27;s performance&lt;&#x2F;a&gt;. Windows has evolved to improve this, see the next section.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;queryperformancecounter&quot;&gt;QueryPerformanceCounter&lt;&#x2F;h3&gt;
&lt;p&gt;QueryPerformanceCounter depends on hardware timer ( TSC or other motherboard timer) or platform timer. The precision depends on hardware timer resolution and access time, Precision = MAX [ Resolution, AccessTime].&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Version&lt;&#x2F;th&gt;&lt;th&gt;QPC basis&lt;&#x2F;th&gt;&lt;th&gt;Sync across cores&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;XP and 2000&lt;&#x2F;td&gt;&lt;td&gt;TSC (some hardware systems&#x27; BIOS didn&#x27;t indicate the hardware CPU characteristics correctly)&lt;&#x2F;td&gt;&lt;td&gt;some multi-core or multi-processor systems used processors with TSCs that couldn&#x27;t be synchronized across cores&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Vista and Server 2008&lt;&#x2F;td&gt;&lt;td&gt;used a platform counter (High Precision Event Timer (HPET)) or the ACPI Power Management Timer (PM timer)&lt;&#x2F;td&gt;&lt;td&gt;shared between multiple processors&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Windows 7 and Server 2008 R2&lt;&#x2F;td&gt;&lt;td&gt;The majority of Windows 7 and Windows Server 2008 R2 computers have processors with constant-rate TSCs and use these counters as the basis for QPC&lt;&#x2F;td&gt;&lt;td&gt;Windows use TSCs as the basis of QPC on single-clock domain systems where the operating system (or the hypervisor) is able to tightly synchronize the individual TSCs across all processors&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Windows 8, Server 2012 R2&lt;&#x2F;td&gt;&lt;td&gt;TSC&lt;&#x2F;td&gt;&lt;td&gt;The TSC synchronization algorithm was significantly improved to better accommodate large systems with many processors&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;other-solutions&quot;&gt;Other solutions&lt;&#x2F;h2&gt;
&lt;p&gt;Someone discussed using QueryPerformanceCounter and timeGetTime at the same time , so that if the result of QueryPerformanceCounter is not acceptable, use timeGetTime to fixup. &lt;&#x2F;p&gt;
&lt;p&gt;Another solution is using Windows kernel events, such as CreateEvent&#x2F;SetEvent&#x2F;WaitForSingleObject. WaitForSingleObject doesn&#x27;t use a timer if you set infinite timeout. It depends on kernel scheduling inside Windows. &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;GoaLitiuM&#x2F;aff9fbfa4294fa6c1680&quot;&gt;Code&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;Windows has evolved to be more power-efficient.
Use high time resolution only when it&#x27;s necessary. 
High time resolution might hurt overall system performance and reduce battery run time.&lt;&#x2F;p&gt;
&lt;p&gt;If your application is performance critical, it should call &lt;code&gt;timeBeginPeriod()&lt;&#x2F;code&gt; to request high timer resolution before using timer service; moreover, your application should not have any window in Windows 11. &lt;&#x2F;p&gt;
&lt;p&gt;QPC is typically the best method to use for high resolution timing.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;multimedia&#x2F;timer-resolution?redirectedfrom=MSDN&quot;&gt;Timer Resolution&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;timeapi&#x2F;nf-timeapi-timebeginperiod&quot;&gt;timeBeginPeriod function (timeapi.h)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;processthreadsapi&#x2F;nf-processthreadsapi-setprocessinformation&quot;&gt;SetProcessInformation function (processthreadsapi.h)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;procthread&#x2F;quality-of-service&quot;&gt;Quality of Service&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows-hardware&#x2F;drivers&#x2F;kernel&#x2F;high-resolution-timers&quot;&gt;High-Resolution Timers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;archive&#x2F;msdn-magazine&#x2F;2004&#x2F;march&#x2F;implementing-a-high-resolution-time-provider-for-windows&quot;&gt;Implement a Continuously Updating, High-Resolution Time Provider for Windows&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;randomascii.wordpress.com&#x2F;2013&#x2F;07&#x2F;08&#x2F;windows-timer-resolution-megawatts-wasted&#x2F;&quot;&gt;Windows Timer Resolution: Megawatts Wasted&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;GoaLitiuM&#x2F;aff9fbfa4294fa6c1680&quot;&gt;usleep() for Windows (C&#x2F;C++) + set timer resolution to lowest possible supported by system&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;devblogs.microsoft.com&#x2F;oldnewthing&#x2F;20050902-00&#x2F;?p=34333&quot;&gt;Precision is not the same as accuracy&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;download.microsoft.com&#x2F;download&#x2F;3&#x2F;0&#x2F;2&#x2F;3027d574-c433-412a-a8b6-5e0a75d5b237&#x2F;timer-resolution.docx&quot;&gt;Timers, Timer Resolution, and Development of Efficient Code&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;arstechnica.com&#x2F;information-technology&#x2F;2012&#x2F;10&#x2F;better-on-the-inside-under-the-hood-of-windows-8&#x2F;2&#x2F;&quot;&gt;Better on the inside: under the hood of Windows 8&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;sysinfo&#x2F;acquiring-high-resolution-time-stamps&quot;&gt;Acquiring high-resolution time stamps&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;yiiyee.cn&#x2F;blog&#x2F;2013&#x2F;09&#x2F;01&#x2F;clock-interval&#x2F;&quot;&gt;Windows 系统时钟间隔&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
</feed>
