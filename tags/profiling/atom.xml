<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh">
    <title>Lei&#x27;s Blog - profiling</title>
    <link rel="self" type="application/atom+xml" href="https://blog.dotone.top/tags/profiling/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://blog.dotone.top"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2020-12-24T00:00:00+00:00</updated>
    <id>https://blog.dotone.top/tags/profiling/atom.xml</id>
    <entry xml:lang="zh">
        <title>Profiling rust on windows with Luke Stackwalker</title>
        <published>2020-12-24T00:00:00+00:00</published>
        <updated>2020-12-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.dotone.top/blog/it/profiling-rust-on-windows-with-Luke-Stackwalker/"/>
        <id>https://blog.dotone.top/blog/it/profiling-rust-on-windows-with-Luke-Stackwalker/</id>
        
        <content type="html" xml:base="https://blog.dotone.top/blog/it/profiling-rust-on-windows-with-Luke-Stackwalker/">&lt;p&gt;There are great profiling tools for rust, such as &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;profiling&quot;&gt;profiling&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;gperftools&quot;&gt;gperftools&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;flamegraph&quot;&gt;flamegraph&lt;&#x2F;a&gt;, etc.  But I would recommend to try
&lt;a href=&quot;https:&#x2F;&#x2F;sourceforge.net&#x2F;p&#x2F;lukestackwalker&quot;&gt;Luke Stackwalker&lt;&#x2F;a&gt; which also works with rust.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;sourceforge.net&#x2F;p&#x2F;lukestackwalker&quot;&gt;Luke Stackwalker&lt;&#x2F;a&gt; is a GUI-based C&#x2F;C++ source profiler for windows.It samples your application&#x27;s stack while the application is running to find out where the application spends most of its time.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;To get start, you need to turn on debug info for rust.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[profile.release]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And start &lt;code&gt;Luke Stackwalker&lt;&#x2F;code&gt; with administrator privilege, otherwise it would crash.&lt;&#x2F;p&gt;
&lt;p&gt;When I tried it on my project, everything looks good at first. Most cpu time was cost on &lt;code&gt;WaitForSingleObject&lt;&#x2F;code&gt;, it&#x27;s totally fine, because the code is waiting for incoming http requests. Then I noticed there were abnormally file open calls on the top list, which should be very very low. I found that I mistakenly open the log file every time there is a write operation.&lt;&#x2F;p&gt;
&lt;p&gt;Have a try.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
