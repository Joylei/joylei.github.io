<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh">
    <title>Lei&#x27;s Blog - rust</title>
    <link rel="self" type="application/atom+xml" href="https://blog.dotone.top/tags/rust/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://blog.dotone.top"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2022-01-17T00:00:00+00:00</updated>
    <id>https://blog.dotone.top/tags/rust/atom.xml</id>
    <entry xml:lang="zh">
        <title>About rust windows subsystem</title>
        <published>2022-01-17T00:00:00+00:00</published>
        <updated>2022-01-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.dotone.top/blog/it/rust-windows-subsystem/"/>
        <id>https://blog.dotone.top/blog/it/rust-windows-subsystem/</id>
        
        <content type="html" xml:base="https://blog.dotone.top/blog/it/rust-windows-subsystem/">&lt;p&gt;Learnt that it need to configure additional attribute for GUI application on windows platform. Otherwise it will launch a console window while launching your GUI application.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;windows_subsystem &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;windows&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Turns on this feature, you&#x27;ll encounter a strange issue. There is no backtrace anymore when your application panics, even though you have configured the &lt;code&gt;RUST_BACKTRACE&lt;&#x2F;code&gt; environment. You will only get this information:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error:&lt;&#x2F;span&gt;&lt;span&gt; process didn&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;t exit successfully: `target\debug\XXXXXX.exe` (exit code: 101)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It&#x27;s difficult to trace what happened in this situation.&lt;&#x2F;p&gt;
&lt;p&gt;No luck with newest version and nightly rust.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;&amp;gt; rustc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;--version --verbose
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rustc&lt;&#x2F;span&gt;&lt;span&gt; 1.58.0 (02072b482 2022-01-11)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;binary:&lt;&#x2F;span&gt;&lt;span&gt; rustc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;commit-hash:&lt;&#x2F;span&gt;&lt;span&gt; 02072b482a8b5357f7fb5e5637444ae30e423c40
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;commit-date:&lt;&#x2F;span&gt;&lt;span&gt; 2022-01-11
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;host:&lt;&#x2F;span&gt;&lt;span&gt; x86_64-pc-windows-msvc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;release:&lt;&#x2F;span&gt;&lt;span&gt; 1.58.0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LLVM&lt;&#x2F;span&gt;&lt;span&gt; version: 13.0.0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;references&quot;&gt;references&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;rfcs&#x2F;1665-windows-subsystem.html&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;88576&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="zh">
        <title>Github workflow: Unable to find libclang: the `libclang` shared library</title>
        <published>2021-10-09T00:00:00+00:00</published>
        <updated>2021-10-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.dotone.top/notes/github-workflow-unable-to-find-libclang-the-libclang-shared-library/"/>
        <id>https://blog.dotone.top/notes/github-workflow-unable-to-find-libclang-the-libclang-shared-library/</id>
        
        <content type="html" xml:base="https://blog.dotone.top/notes/github-workflow-unable-to-find-libclang-the-libclang-shared-library/">&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;&#x2F;h2&gt;
&lt;p&gt;It has been a while &lt;code&gt;bindgen&lt;&#x2F;code&gt; did not work in the github workflow for my github project.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;   --- stderr
&lt;&#x2F;span&gt;&lt;span&gt;  Not building on Android.
&lt;&#x2F;span&gt;&lt;span&gt;  Not building on Android.
&lt;&#x2F;span&gt;&lt;span&gt;  MSVC can handle C99, compiling code as C
&lt;&#x2F;span&gt;&lt;span&gt;  BASE_C_FLAGS= -nologo -MD -Brepro &#x2F;W3 &#x2F;c
&lt;&#x2F;span&gt;&lt;span&gt;  BASE_CXX_FLAGS= -nologo -MD -Brepro &#x2F;W3
&lt;&#x2F;span&gt;&lt;span&gt;  CMake Warning:
&lt;&#x2F;span&gt;&lt;span&gt;    Manually-specified variables were not used by the project:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      CMAKE_ASM_FLAGS
&lt;&#x2F;span&gt;&lt;span&gt;      CMAKE_ASM_FLAGS_DEBUG
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  cmake build out dir: &amp;quot;D:\\a\\plctag-rs\\plctag-rs\\target\\debug\\build\\plctag-sys-a3fc1b7311116163\\out&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  thread &amp;#39;main&amp;#39; panicked at &amp;#39;Unable to find libclang: &amp;quot;the `libclang` shared library at C:\\msys64\\mingw64\\bin\\libclang.dll could not be opened: LoadLibraryExW failed&amp;quot;&amp;#39;, C:\Users\runneradmin\.cargo\registry\src\github.com-1ecc6299db9ec823\bindgen-0.59.1\src&#x2F;lib.rs:2117:31
&lt;&#x2F;span&gt;&lt;span&gt;  note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Wasted hours to resolve it. Finally, found that the solution is that you have to install LLVM yourself.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Cache LLVM and Clang
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cache-llvm
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;actions&#x2F;cache@v2
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;with&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;${{ runner.temp }}&#x2F;llvm
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;llvm-11.0
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;matrix.os == &amp;#39;windows-latest&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Install LLVM and Clang
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;KyleMayes&#x2F;install-llvm-action@v1
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;with&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;11.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;directory&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;${{ runner.temp }}&#x2F;llvm
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cached&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;${{ steps.cache-llvm.outputs.cache-hit }}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;matrix.os == &amp;#39;windows-latest&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Hope this saves you some time.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-bindgen&#x2F;issues&#x2F;1797&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;github.com&#x2F;actions&#x2F;virtual-environments&#x2F;issues&#x2F;3316&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;github.com&#x2F;godot-rust&#x2F;godot-rust&#x2F;blob&#x2F;master&#x2F;.github&#x2F;composite&#x2F;llvm&#x2F;action.yml&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="zh">
        <title>Profiling rust on windows with Luke Stackwalker</title>
        <published>2020-12-24T00:00:00+00:00</published>
        <updated>2020-12-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.dotone.top/blog/it/profiling-rust-on-windows-with-Luke-Stackwalker/"/>
        <id>https://blog.dotone.top/blog/it/profiling-rust-on-windows-with-Luke-Stackwalker/</id>
        
        <content type="html" xml:base="https://blog.dotone.top/blog/it/profiling-rust-on-windows-with-Luke-Stackwalker/">&lt;p&gt;There are great profiling tools for rust, such as &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;profiling&quot;&gt;profiling&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;gperftools&quot;&gt;gperftools&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;flamegraph&quot;&gt;flamegraph&lt;&#x2F;a&gt;, etc.  But I would recommend to try
&lt;a href=&quot;https:&#x2F;&#x2F;sourceforge.net&#x2F;p&#x2F;lukestackwalker&quot;&gt;Luke Stackwalker&lt;&#x2F;a&gt; which also works with rust.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;sourceforge.net&#x2F;p&#x2F;lukestackwalker&quot;&gt;Luke Stackwalker&lt;&#x2F;a&gt; is a GUI-based C&#x2F;C++ source profiler for windows.It samples your application&#x27;s stack while the application is running to find out where the application spends most of its time.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;To get start, you need to turn on debug info for rust.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[profile.release]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And start &lt;code&gt;Luke Stackwalker&lt;&#x2F;code&gt; with administrator privilege, otherwise it would crash.&lt;&#x2F;p&gt;
&lt;p&gt;When I tried it on my project, everything looks good at first. Most cpu time was cost on &lt;code&gt;WaitForSingleObject&lt;&#x2F;code&gt;, it&#x27;s totally fine, because the code is waiting for incoming http requests. Then I noticed there were abnormally file open calls on the top list, which should be very very low. I found that I mistakenly open the log file every time there is a write operation.&lt;&#x2F;p&gt;
&lt;p&gt;Have a try.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="zh">
        <title>opencv-rust: libclang not loaded</title>
        <published>2020-09-16T00:00:00+00:00</published>
        <updated>2020-09-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.dotone.top/blog/it/opencv-rust-libclang-not-loaded/"/>
        <id>https://blog.dotone.top/blog/it/opencv-rust-libclang-not-loaded/</id>
        
        <content type="html" xml:base="https://blog.dotone.top/blog/it/opencv-rust-libclang-not-loaded/">&lt;p&gt;I failed to build a project when use &lt;code&gt;opencv-rust&lt;&#x2F;code&gt; as dependency on Windows 10. The error message said&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;thread &amp;#39;main&amp;#39; panicked at &amp;#39;a `libclang` shared library is not loaded on this thread&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It&#x27;s a little strange. Because &lt;code&gt;libclang.dll&lt;&#x2F;code&gt; do exist and  can be found in &lt;code&gt;PATH&lt;&#x2F;code&gt; env, and other projects that depends on &lt;code&gt;bindgen&lt;&#x2F;code&gt; can be built successfully.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, found that I have to enable &lt;code&gt;clang-runtime&lt;&#x2F;code&gt;  feature to get the project compiled.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;opencv &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;features&lt;&#x2F;span&gt;&lt;span&gt;=[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;buildtime-bindgen&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;clang-runtime&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="zh">
        <title>qute published to Github</title>
        <published>2020-09-07T00:00:00+00:00</published>
        <updated>2020-09-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.dotone.top/blog/it/qute-published-to-github/"/>
        <id>https://blog.dotone.top/blog/it/qute-published-to-github/</id>
        
        <content type="html" xml:base="https://blog.dotone.top/blog/it/qute-published-to-github/">&lt;p&gt;今天把我为&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Joylei&#x2F;qute&quot;&gt;&lt;code&gt;qute&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;发布到了&lt;code&gt;github&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wei-shen-me&quot;&gt;为什么&lt;&#x2F;h2&gt;
&lt;p&gt;我有一台&lt;code&gt;TS453B mini&lt;&#x2F;code&gt;，但是说实话用的并不是很顺畅，系统特别不稳定，总是容易卡死。想着换成其它系统，最后选择了&lt;code&gt;Alpine Linux&lt;&#x2F;code&gt;。
虽然遇到了一些困难，总算是解决了，顺利运行起来。但是有个问题一直无解，那就是没法控制风扇的转速。在&lt;code&gt;BIOS&lt;&#x2F;code&gt;中可以设置风扇为&lt;code&gt;auto&lt;&#x2F;code&gt;或者&lt;code&gt;manual&lt;&#x2F;code&gt;。
实测&lt;code&gt;auto&lt;&#x2F;code&gt;不靠谱，机器会热死机。设置&lt;code&gt;manual&lt;&#x2F;code&gt;的话，风扇在机器启动时以100%转速运转，如果可以忍耐这个噪音的话，到这一步就可以了。
那么能不能直接控制风扇呢？没有任何头绪，直到发现了&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;guedou&#x2F;TS-453Be&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;guedou&#x2F;TS-453Be&lt;&#x2F;a&gt;，然后折腾一番，没有在&lt;code&gt;QTS&lt;&#x2F;code&gt;中运行起来，
报了&lt;code&gt;segment fault&lt;&#x2F;code&gt;错误。作者提供了完整的步骤和思路，我就想自己写一个吧，大概是从6、7月份开始的，用&lt;code&gt;radare2&lt;&#x2F;code&gt;进行逆向分析，然后就有了&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Joylei&#x2F;qute&quot;&gt;qute&lt;&#x2F;a&gt;。期间还想了很多，例如是不是写成驱动形式，是不是写一个自动控制调整转速的逻辑，是不是支持获取其它设备的温度；所以看了怎么实现&lt;code&gt;Linux&lt;&#x2F;code&gt;驱动和&lt;code&gt;Linux&lt;&#x2F;code&gt;驱动相关实现代码，怎么用&lt;code&gt;rust&lt;&#x2F;code&gt;写&lt;code&gt;Linux&lt;&#x2F;code&gt;驱动，硬盘&lt;code&gt;SMART&lt;&#x2F;code&gt;属性读取等等。写成驱动形式好处就是可以配合其它&lt;code&gt;PWM&lt;&#x2F;code&gt;调度控制的程序，不用自己去写控制逻辑。&lt;s&gt;想了很多但最后都放弃了没有实现。&lt;&#x2F;s&gt;2021年7月实现了自动调速控制。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shi-shen-me&quot;&gt;是什么&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;qute&lt;&#x2F;code&gt;是用&lt;code&gt;rust&lt;&#x2F;code&gt;写的通过&lt;code&gt;EC&lt;&#x2F;code&gt;协议来控制&lt;code&gt;QNAP NAS&lt;&#x2F;code&gt;的风扇转速。理论上只要是基于&lt;code&gt;ITE8528&lt;&#x2F;code&gt;的&lt;code&gt;QNAP NAS&lt;&#x2F;code&gt;都可以控制。
除了控制风扇和获取温度，还可以设置&lt;code&gt;EuP&lt;&#x2F;code&gt;, &lt;code&gt;Power Recovery Mode&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;关于&lt;code&gt;EC&lt;&#x2F;code&gt;协议，请查看我的另一片文章&lt;a href=&quot;https:&#x2F;&#x2F;blog.dotone.top&#x2F;blog&#x2F;it&#x2F;ec-protocol&#x2F;&quot;&gt;EC 协议简析&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zen-me-yong&quot;&gt;怎么用&lt;&#x2F;h2&gt;
&lt;p&gt;注意：需要&lt;code&gt;root&lt;&#x2F;code&gt;权限运行。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;qute v0.1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;QNAP device control. Use AT YOUR OWN RISK!!!
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;USAGE: qute [OPTIONS] [COMMANDS]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;OPTIONS:
&lt;&#x2F;span&gt;&lt;span&gt;  -V, --version                 Show version number
&lt;&#x2F;span&gt;&lt;span&gt;  -h, --help                    Show help message
&lt;&#x2F;span&gt;&lt;span&gt;  -v, --verbose [level:N]       Show verbose messages
&lt;&#x2F;span&gt;&lt;span&gt;  -q, --quiet                   Silence all output
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;COMMANDS:
&lt;&#x2F;span&gt;&lt;span&gt;  eup                           get or set Eup mode
&lt;&#x2F;span&gt;&lt;span&gt;  fan                            get or set fan speed
&lt;&#x2F;span&gt;&lt;span&gt;  power                       get or set power recovery mode
&lt;&#x2F;span&gt;&lt;span&gt;  temp                         get temperature
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;ts-453b-mini-gui-ge-xin-xi&quot;&gt;TS-453B mini 规格信息&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;453Bmini
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Intel Celeron J3455 CPU is a 1.5GHz frequency, that can be bursted to 2.3GHz per core
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;HD Graphics 500 GPU with 12 EUs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;DDR3L 1600 RAM
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;风扇 fan: xtreme BD121232LB  元山科技
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;(120 mm, 12 V,1700 RPM, 23 CFM, 42.5 dBA, and 80000 MTBF)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;+12V DC
&lt;&#x2F;span&gt;&lt;span&gt;4PIN (PWM)
&lt;&#x2F;span&gt;&lt;span&gt;120 x 120 x 32mm
&lt;&#x2F;span&gt;&lt;span&gt;1500 min^-1 nominal
&lt;&#x2F;span&gt;&lt;span&gt;Cable length 250 mm
&lt;&#x2F;span&gt;&lt;span&gt;Mounting holes 105 x 105 +&#x2F;0.3 mm
&lt;&#x2F;span&gt;&lt;span&gt;0.19A
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;内存可以加到16GB。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;geng-duo&quot;&gt;更多&lt;&#x2F;h2&gt;
&lt;p&gt;请移步&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Joylei&#x2F;qute&quot;&gt;&lt;code&gt;github&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;了解更多。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao&quot;&gt;参考&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;github.com&#x2F;guedou&#x2F;TS-453Be&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="zh">
        <title>May -  rust stackful coroutine</title>
        <published>2020-09-06T00:00:00+00:00</published>
        <updated>2020-09-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.dotone.top/blog/it/may-coroutine/"/>
        <id>https://blog.dotone.top/blog/it/may-coroutine/</id>
        
        <content type="html" xml:base="https://blog.dotone.top/blog/it/may-coroutine/">&lt;p&gt;最近在项目中尝试了&lt;code&gt;rust&lt;&#x2F;code&gt;下的协程库&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Xudong-Huang&#x2F;may&quot;&gt;&lt;code&gt;May&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;。如果你对写&lt;code&gt;async\await&lt;&#x2F;code&gt;感到厌倦，可以试试&lt;code&gt;May&lt;&#x2F;code&gt;,换换脑子。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;jie-shao&quot;&gt;介绍&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Xudong-Huang&#x2F;may&quot;&gt;&lt;code&gt;May&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;是一个用&lt;code&gt;pure rust&lt;&#x2F;code&gt;写的基于栈的协程库。官方的介绍如下：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;May is a high-performant library for programming stackful coroutines with which you can easily develop and maintain massive concurrent programs. It can be thought as the Rust version of the popular Goroutine.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;常见的协程库，在&lt;code&gt;python&lt;&#x2F;code&gt;下有&lt;code&gt;gevent&lt;&#x2F;code&gt;, &lt;code&gt;c\c++&lt;&#x2F;code&gt;有&lt;code&gt;libuv&lt;&#x2F;code&gt;。在&lt;code&gt;rust&lt;&#x2F;code&gt;下也有其它基于&lt;code&gt;ffi&lt;&#x2F;code&gt;封装的&lt;code&gt;libuv&lt;&#x2F;code&gt;等库。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;he-futurejian-dan-dui-bi&quot;&gt;和&lt;code&gt;Future&lt;&#x2F;code&gt;简单对比&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;May&lt;&#x2F;code&gt;和&lt;code&gt;rust&lt;&#x2F;code&gt;的&lt;code&gt;Future&lt;&#x2F;code&gt;有哪些相同和不同的地方？&lt;&#x2F;p&gt;
&lt;p&gt;相同的地方：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;都是基于&lt;code&gt;generator&lt;&#x2F;code&gt;实现的，也就是说都是&lt;code&gt;stackful&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;捕获的变量都需要&lt;code&gt;move&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;都需要&lt;code&gt;runtime&lt;&#x2F;code&gt;去执行&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;不同的地方：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Future&lt;&#x2F;code&gt;需要&lt;code&gt;pin reference&lt;&#x2F;code&gt;, &lt;code&gt;May&lt;&#x2F;code&gt;不需要(可能也需要？)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Future&lt;&#x2F;code&gt;使用&lt;code&gt;async\await&lt;&#x2F;code&gt;关键字，&lt;code&gt;May&lt;&#x2F;code&gt;不需要&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;shi-li&quot;&gt;示例&lt;&#x2F;h2&gt;
&lt;p&gt;下面的示例简单展示了&lt;code&gt;task&lt;&#x2F;code&gt;的&lt;code&gt;spawn&lt;&#x2F;code&gt;和&lt;code&gt;cancel&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;macro_use&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; may;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;may::coroutine as co;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::time::{Duration, Instant};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; t = go!(|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;main_task&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    t.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main_task&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; tasks = vec![];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; i in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; task = go!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;|| { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;child_task&lt;&#x2F;span&gt;&lt;span&gt;(i) });
&lt;&#x2F;span&gt;&lt;span&gt;        tasks.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(task);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    co::sleep(Duration::from_secs(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(i, t) in (&amp;amp;tasks[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;]).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;enumerate&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            t.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;coroutine&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cancel&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;child &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: cancelled&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, i);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; t in tasks {
&lt;&#x2F;span&gt;&lt;span&gt;        t.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;all done!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;child_task&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; now = Instant::now();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;elapsed&lt;&#x2F;span&gt;&lt;span&gt;() &amp;gt; Duration::from_secs(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;child &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: done&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, index);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;child &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: running&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, index);
&lt;&#x2F;span&gt;&lt;span&gt;        co::sleep(Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;cancel-de-wen-ti&quot;&gt;Cancel 的问题&lt;&#x2F;h2&gt;
&lt;p&gt;使用&lt;code&gt;cancel&lt;&#x2F;code&gt;后发现程序在&lt;code&gt;release&lt;&#x2F;code&gt;模式下莫名的崩溃。
调试及查看源代码，发现是由于&lt;code&gt;May&lt;&#x2F;code&gt;的&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Xudong-Huang&#x2F;may&#x2F;blob&#x2F;master&#x2F;src&#x2F;cancel.rs&quot;&gt;cancel&lt;&#x2F;a&gt;机制使用&lt;code&gt;rust&lt;&#x2F;code&gt;的&lt;code&gt;panic&lt;&#x2F;code&gt;机制。所以无法在编译时优化使用自定义的&lt;code&gt;panic&lt;&#x2F;code&gt;处理机制。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[profile.release]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;panic &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;abort&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果使用这个配置，&lt;code&gt;cancel()&lt;&#x2F;code&gt;时应用程序会崩溃退出。&lt;&#x2F;p&gt;
&lt;p&gt;进一步阅读&lt;code&gt;may&lt;&#x2F;code&gt;的代码发现，&lt;code&gt;may&lt;&#x2F;code&gt;不会主动&lt;code&gt;panic&lt;&#x2F;code&gt;，&lt;code&gt;panic&lt;&#x2F;code&gt;是由于其它代码&lt;code&gt;panic&lt;&#x2F;code&gt;被它捕捉到了。可能是哪里&lt;code&gt;unwrap&lt;&#x2F;code&gt;之类的调用抛出的。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="zh">
        <title>Zola Introduction</title>
        <published>2020-09-04T00:00:00+00:00</published>
        <updated>2020-09-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.dotone.top/blog/it/intro-zola/"/>
        <id>https://blog.dotone.top/blog/it/intro-zola/</id>
        
        <content type="html" xml:base="https://blog.dotone.top/blog/it/intro-zola/">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;&quot;&gt;zola&lt;&#x2F;a&gt;是用&lt;code&gt;pure rust&lt;&#x2F;code&gt;写的静态建站工具，类似的工具有用&lt;code&gt;go&lt;&#x2F;code&gt;写的&lt;code&gt;hugo&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;an-zhuang-zola&quot;&gt;安装zola&lt;&#x2F;h1&gt;
&lt;p&gt;可以直接下载二进制文件。也可以使用各系统对应的安装工具安装。&lt;&#x2F;p&gt;
&lt;p&gt;MacOS&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;brew&lt;&#x2F;span&gt;&lt;span&gt; install zola
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;alpine linux:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;apk install zola
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Windows
使用&lt;code&gt;Scoop&lt;&#x2F;code&gt;或者&lt;code&gt;Chocolatey&lt;&#x2F;code&gt;安装。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;shi-yong&quot;&gt;使用&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;jian-li-xin-zhan-dian&quot;&gt;建立新站点&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zola&lt;&#x2F;span&gt;&lt;span&gt; init mysite
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里&lt;code&gt;mysite&lt;&#x2F;code&gt;是你的站点名字，会创建对应的目录。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mu-lu-jie-gou&quot;&gt;目录结构&lt;&#x2F;h2&gt;
&lt;p&gt;建好后的目录结构&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;mysite
&lt;&#x2F;span&gt;&lt;span&gt;- content
&lt;&#x2F;span&gt;&lt;span&gt;- public
&lt;&#x2F;span&gt;&lt;span&gt;- sass
&lt;&#x2F;span&gt;&lt;span&gt;- static
&lt;&#x2F;span&gt;&lt;span&gt;- templates
&lt;&#x2F;span&gt;&lt;span&gt;- themes
&lt;&#x2F;span&gt;&lt;span&gt;- config.toml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;content&lt;&#x2F;code&gt;里存放markdown文件
&lt;code&gt;public&lt;&#x2F;code&gt;里存放编译好的文件
&lt;code&gt;sass&lt;&#x2F;code&gt; 存放自定义的sass文件
&lt;code&gt;static&lt;&#x2F;code&gt;存放额外的静态资源
&lt;code&gt;templates&lt;&#x2F;code&gt;存放自定义的模板文件
&lt;code&gt;themes&lt;&#x2F;code&gt;存放下载的主题
&lt;code&gt;config.toml&lt;&#x2F;code&gt;站点的配置文件&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xia-zai-zhu-ti&quot;&gt;下载主题&lt;&#x2F;h2&gt;
&lt;p&gt;官方已经有一些主题，可以到&lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;themes&#x2F;&quot;&gt;这里&lt;&#x2F;a&gt;查看。&lt;&#x2F;p&gt;
&lt;p&gt;下载下来放在&lt;code&gt;themes&lt;&#x2F;code&gt;目录就可以了。每个主题都有使用说明，按照说明操作。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;nei-rong-xiang-guan-gai-nian&quot;&gt;内容相关概念&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;front-matter&quot;&gt;front matter&lt;&#x2F;h3&gt;
&lt;p&gt;在markdown文件中定义的元数据区域，以&lt;code&gt;+++&lt;&#x2F;code&gt;来标识起始和结束。类似于：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;+++
&lt;&#x2F;span&gt;&lt;span&gt;title = &amp;quot;Something new&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;date = 2017-09-25
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[taxonomies]
&lt;&#x2F;span&gt;&lt;span&gt;categories = [&amp;quot;Prog&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;tags = [&amp;quot;rust&amp;quot;, &amp;quot;async&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;+++
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;section&quot;&gt;Section&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;content&lt;&#x2F;code&gt;目录下的任何一个目录，只要它下面有&lt;code&gt;_index.md&lt;&#x2F;code&gt;文件，那么这个目录就是一个&lt;code&gt;section&lt;&#x2F;code&gt;。
&lt;code&gt;_index.md&lt;&#x2F;code&gt;就是元数据文件。
&lt;code&gt;section&lt;&#x2F;code&gt;需要&lt;code&gt;section.html&lt;&#x2F;code&gt;模板来渲染内容，如果在主题的&lt;code&gt;templates&lt;&#x2F;code&gt;目录没有这个文件，按照&lt;code&gt;index.html&lt;&#x2F;code&gt;修改一个。
不同的地方就是&lt;code&gt;index.html&lt;&#x2F;code&gt;中使用&lt;code&gt;paginator&lt;&#x2F;code&gt;变量，在&lt;code&gt;section.html&lt;&#x2F;code&gt;中使用&lt;code&gt;section&lt;&#x2F;code&gt;变量，它们的属性是一样的。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;section&lt;&#x2F;code&gt;相关元数据定义&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sorted_by&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;section.html&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# render为true时会显示section的页面，false时不显示
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# transparent为true时内容对父section可见，false时不可见
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;transparent&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;更多内容查看&lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;documentation&#x2F;content&#x2F;section&#x2F;&quot;&gt;&lt;code&gt;section&lt;&#x2F;code&gt;定义页面&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;page&quot;&gt;Page&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;page&lt;&#x2F;code&gt;就是一个个页面。
如果一个目录下有&lt;code&gt;index.md&lt;&#x2F;code&gt;，那么这个目录就会渲染成一个页面。例如&lt;code&gt;content\life\my-note\index.md&lt;&#x2F;code&gt;，会形成URL类似于&lt;code&gt;http:&#x2F;&#x2F;base_url&#x2F;life&#x2F;my-note&lt;&#x2F;code&gt;。
如果文件的名字不是&lt;code&gt;index.md&lt;&#x2F;code&gt;，而是&lt;code&gt;something.md&lt;&#x2F;code&gt;，那么形成的URL类似于&lt;code&gt;http:&#x2F;&#x2F;base_url&#x2F;life&#x2F;something&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;page&lt;&#x2F;code&gt;的主要&lt;code&gt;front matter&lt;&#x2F;code&gt;属性：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Something new&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;date &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2017-09-25
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[taxonomies]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;categories &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Prog&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tags &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rust&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;zola&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;每个页面基本上只设置上述属性就够了，更多查看&lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;documentation&#x2F;content&#x2F;page&#x2F;#front-matter&quot;&gt;这里&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jing-tai-zi-yuan&quot;&gt;静态资源&lt;&#x2F;h3&gt;
&lt;p&gt;静态资源可以在markdown文件中用相对路径引用，&lt;code&gt;zola&lt;&#x2F;code&gt;在build时会把资源复制到&lt;code&gt;public&lt;&#x2F;code&gt;目录对应的位置。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yu-fa-gao-liang&quot;&gt;语法高亮&lt;&#x2F;h3&gt;
&lt;p&gt;需要在&lt;code&gt;config.toml&lt;&#x2F;code&gt;启用，并配置一个主题。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;highlight_code &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;highlight_theme &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;material-dark&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;更多语法高亮主题看&lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;documentation&#x2F;getting-started&#x2F;configuration&#x2F;#syntax-highlighting&quot;&gt;这里&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;taxonomies&quot;&gt;Taxonomies&lt;&#x2F;h3&gt;
&lt;p&gt;在config.toml中配置分类和标签。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;taxonomies = [
&lt;&#x2F;span&gt;&lt;span&gt;    {name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;categories&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, rss = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;    {name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tags&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, rss = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;feed&quot;&gt;Feed&lt;&#x2F;h3&gt;
&lt;p&gt;在 config.toml中配置：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;generate_feed &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;lian-jie-yu-yin-yong&quot;&gt;链接与引用&lt;&#x2F;h3&gt;
&lt;p&gt;锚点&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;zola&lt;&#x2F;code&gt;会为内容中的标题生成唯一锚点。如：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;# Something exciting! &amp;lt;- something-exciting
&lt;&#x2F;span&gt;&lt;span&gt;## Example code &amp;lt;- example-code
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Something else &amp;lt;- something-else
&lt;&#x2F;span&gt;&lt;span&gt;## Example code &amp;lt;- example-code-1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;也可以手动指定锚点:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;# Something manual! {#manual}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;内部链接引用
&lt;code&gt;content&lt;&#x2F;code&gt;目录下的页面可以直接以&lt;code&gt;@&#x2F;&lt;&#x2F;code&gt;开头引用。例如：
&lt;code&gt;content&#x2F;pages&#x2F;about.md&lt;&#x2F;code&gt; 这样引用 &lt;code&gt;[my link](@&#x2F;pages&#x2F;about.md)&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;serve&quot;&gt;Serve&lt;&#x2F;h2&gt;
&lt;p&gt;本地&lt;code&gt;serve&lt;&#x2F;code&gt;预览：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zola&lt;&#x2F;span&gt;&lt;span&gt; serve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --interface&lt;&#x2F;span&gt;&lt;span&gt; 0.0.0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --port&lt;&#x2F;span&gt;&lt;span&gt; 2000
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;build&quot;&gt;Build&lt;&#x2F;h2&gt;
&lt;p&gt;构建静态页面：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zola&lt;&#x2F;span&gt;&lt;span&gt; build
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;deploy-to-github&quot;&gt;Deploy to github&lt;&#x2F;h2&gt;
&lt;p&gt;使用github actions部署。
简单的来说&lt;code&gt;github&lt;&#x2F;code&gt;允许选择哪个分支来发布。
你可以把所有代码上传到某个分支，然后使用&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shalzz&#x2F;zola-deploy-action&quot;&gt;&lt;code&gt;zola-deploy-action&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;来自动构建和发布。&lt;&#x2F;p&gt;
&lt;p&gt;这里示例的是用&lt;code&gt;code&lt;&#x2F;code&gt;分支存放所有代码，用&lt;code&gt;master&lt;&#x2F;code&gt;分支做&lt;code&gt;Github Pages&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;code&gt;Github&lt;&#x2F;code&gt;创建一个&lt;code&gt;Personal Access Token&lt;&#x2F;code&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;settings&#x2F;tokens&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;settings&#x2F;tokens&lt;&#x2F;a&gt;，记住这个&lt;code&gt;token&lt;&#x2F;code&gt;的值&lt;&#x2F;li&gt;
&lt;li&gt;把这个&lt;code&gt;token&lt;&#x2F;code&gt;的值添加到项目的设置的&lt;code&gt;Secrets&lt;&#x2F;code&gt;里，并且名字为&lt;code&gt;TOKEN&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;添加&lt;code&gt;github action&lt;&#x2F;code&gt;：在``code&lt;code&gt;分支创建&lt;&#x2F;code&gt;.github&#x2F;workflows&#x2F;zola.yml`，内容为&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;on:
&lt;&#x2F;span&gt;&lt;span&gt;  push:
&lt;&#x2F;span&gt;&lt;span&gt;    branches:
&lt;&#x2F;span&gt;&lt;span&gt;      - code
&lt;&#x2F;span&gt;&lt;span&gt;  pull_request:
&lt;&#x2F;span&gt;&lt;span&gt;jobs:
&lt;&#x2F;span&gt;&lt;span&gt;  build:
&lt;&#x2F;span&gt;&lt;span&gt;    runs-on: ubuntu-latest
&lt;&#x2F;span&gt;&lt;span&gt;    if: github.ref != &amp;#39;refs&#x2F;heads&#x2F;code&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    steps:
&lt;&#x2F;span&gt;&lt;span&gt;      - name: &amp;#39;Checkout&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;        uses: actions&#x2F;checkout@main
&lt;&#x2F;span&gt;&lt;span&gt;      - name: &amp;#39;Build only&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;        uses: shalzz&#x2F;zola-deploy-action@v0.10.1
&lt;&#x2F;span&gt;&lt;span&gt;        env:
&lt;&#x2F;span&gt;&lt;span&gt;          BUILD_DIR: .
&lt;&#x2F;span&gt;&lt;span&gt;          TOKEN: ${{ secrets.TOKEN }}
&lt;&#x2F;span&gt;&lt;span&gt;          BUILD_ONLY: true
&lt;&#x2F;span&gt;&lt;span&gt;  build_and_deploy:
&lt;&#x2F;span&gt;&lt;span&gt;    runs-on: ubuntu-latest
&lt;&#x2F;span&gt;&lt;span&gt;    if: github.ref == &amp;#39;refs&#x2F;heads&#x2F;code&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    steps:
&lt;&#x2F;span&gt;&lt;span&gt;      - name: &amp;#39;Checkout&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;        uses: actions&#x2F;checkout@main
&lt;&#x2F;span&gt;&lt;span&gt;      - name: &amp;#39;Build and deploy&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;        uses: shalzz&#x2F;zola-deploy-action@v0.10.1
&lt;&#x2F;span&gt;&lt;span&gt;        env:
&lt;&#x2F;span&gt;&lt;span&gt;          PAGES_BRANCH: master
&lt;&#x2F;span&gt;&lt;span&gt;          BUILD_DIR: .
&lt;&#x2F;span&gt;&lt;span&gt;          TOKEN: ${{ secrets.TOKEN }}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;当你对远程仓库执行&lt;code&gt;pull&lt;&#x2F;code&gt;或者&lt;code&gt;push&lt;&#x2F;code&gt;代码到&lt;code&gt;code&lt;&#x2F;code&gt;分支时就会自动运行&lt;code&gt;workflow&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;more&quot;&gt;More&lt;&#x2F;h2&gt;
&lt;p&gt;到&lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;&quot;&gt;官网&lt;&#x2F;a&gt;去探索更多内容吧。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="zh">
        <title>plctag-rs published to Github</title>
        <published>2020-09-02T00:00:00+00:00</published>
        <updated>2020-09-02T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.dotone.top/blog/it/plctag-rs-published-to-github/"/>
        <id>https://blog.dotone.top/blog/it/plctag-rs-published-to-github/</id>
        
        <content type="html" xml:base="https://blog.dotone.top/blog/it/plctag-rs-published-to-github/">&lt;p&gt;今天把我为&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;libplctag&#x2F;libplctag&quot;&gt;&lt;code&gt;libplctag&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;写的&lt;code&gt;rust&lt;&#x2F;code&gt;封装&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Joylei&#x2F;plctag-rs&quot;&gt;&lt;code&gt;plctag-rs&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;发布到了&lt;code&gt;github&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;plctag-rs&quot;&gt;plctag-rs&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;a rust wrapper of libplctag, with rust style APIs and useful extensions.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;gong-neng&quot;&gt;功能&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;同步API&lt;&#x2F;li&gt;
&lt;li&gt;异步API&lt;&#x2F;li&gt;
&lt;li&gt;Path Builder&lt;&#x2F;li&gt;
&lt;li&gt;UDT支持&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;zen-me-shi-yong&quot;&gt;怎么使用&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;下载&lt;code&gt;libplctag&lt;&#x2F;code&gt;的二进制发布，并解压。&lt;&#x2F;li&gt;
&lt;li&gt;设置环境变量&lt;code&gt;LIBPLCTAG_PATH&lt;&#x2F;code&gt;指向之前解压到的目录。&lt;&#x2F;li&gt;
&lt;li&gt;把&lt;code&gt;plctag&lt;&#x2F;code&gt;添加到&lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[dependencies]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;plctag&lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;Joylei&#x2F;plctag-rs.git&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;shi-li&quot;&gt;示例&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;tong-bu-du-xie&quot;&gt;同步读写&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;plctag::{Accessor, RawTag};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; timeout = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;ms
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; path=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;protocol=ab-eip&amp;amp;plc=controllogix&amp;amp;path=1,0&amp;amp;gateway=192.168.1.120&amp;amp;name=MyTag1&amp;amp;elem_count=1&amp;amp;elem_size=16&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; YOUR TAG DEFINITION
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; tag = RawTag::new(path, timeout).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;read tag
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; status = tag.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span&gt;(timeout);
&lt;&#x2F;span&gt;&lt;span&gt;assert!(status.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_ok&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; offset = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; value:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u16 &lt;&#x2F;span&gt;&lt;span&gt;= tag.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_value&lt;&#x2F;span&gt;&lt;span&gt;(offset).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tag value: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, value);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; value = value + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;tag.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set_value&lt;&#x2F;span&gt;&lt;span&gt;(offset, value).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;write tag
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; status = tag.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(timeout);
&lt;&#x2F;span&gt;&lt;span&gt;assert!(status.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_ok&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;write done!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;yi-bu-du-xie&quot;&gt;异步读写&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;plctag::future::AsyncTag;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;tokio::runtime::Runtime;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; rt = Runtime::new()::unwrap();
&lt;&#x2F;span&gt;&lt;span&gt;rt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;block_on&lt;&#x2F;span&gt;&lt;span&gt;(async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; YOUR TAG DEFINITION
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; path=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;protocol=ab-eip&amp;amp;plc=controllogix&amp;amp;path=1,0&amp;amp;gateway=192.168.1.120&amp;amp;name=MyTag1&amp;amp;elem_count=1&amp;amp;elem_size=16&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; tag = AsyncTag::new(path).await.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; offset = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; value:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u16 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;write tag
&lt;&#x2F;span&gt;&lt;span&gt;    tag.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set_and_write&lt;&#x2F;span&gt;&lt;span&gt;(offset, value).await.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; read tag
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; value:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u16 &lt;&#x2F;span&gt;&lt;span&gt;= tag.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;read_and_get&lt;&#x2F;span&gt;&lt;span&gt;(offset).await.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(value, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;udt&quot;&gt;UDT&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;plctag::{Accessor, RawTag, Result, TagValue};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; define your UDT
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Default, Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;MyUDT {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;v1&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;v2&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;TagValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;MyUDT {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_value&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tag&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;RawTag, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;offset&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;()&amp;gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.v1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_value&lt;&#x2F;span&gt;&lt;span&gt;(tag, offset)?;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.v2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_value&lt;&#x2F;span&gt;&lt;span&gt;(tag, offset + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)?;
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;set_value&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tag&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;RawTag, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;offset&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;()&amp;gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.v1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set_value&lt;&#x2F;span&gt;&lt;span&gt;(tag, offset)?;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.v2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set_value&lt;&#x2F;span&gt;&lt;span&gt;(tag, offset + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)?;
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(){
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; timeout = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;ms
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; YOUR TAG DEFINITION
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; path=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;protocol=ab-eip&amp;amp;plc=controllogix&amp;amp;path=1,0&amp;amp;gateway=192.168.1.120&amp;amp;name=MyTag2&amp;amp;elem_count=2&amp;amp;elem_size=16&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; tag = RawTag::new(path, timeout).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;read tag
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; status = tag.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span&gt;(timeout);
&lt;&#x2F;span&gt;&lt;span&gt;    assert!(status.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_ok&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; offset = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; value:MyUDT = tag.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_value&lt;&#x2F;span&gt;&lt;span&gt;(offset).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tag value: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, value);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    value.v1 = value.v1 + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    tag.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set_value&lt;&#x2F;span&gt;&lt;span&gt;(offset, value).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;write tag
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; status = tag.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(timeout);
&lt;&#x2F;span&gt;&lt;span&gt;    assert!(status.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_ok&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;write done!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;more&quot;&gt;More&lt;&#x2F;h2&gt;
&lt;p&gt;后续可能添加&lt;code&gt;Controller&lt;&#x2F;code&gt;及&lt;code&gt;scan&lt;&#x2F;code&gt;模式来简化使用的难度。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="zh">
        <title>rust bindgen error: &#x27;stddef.h&#x27; file not found</title>
        <published>2020-07-03T00:00:00+00:00</published>
        <updated>2020-07-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.dotone.top/blog/it/rust-bindgen-error-stddef.h-file-not-found/"/>
        <id>https://blog.dotone.top/blog/it/rust-bindgen-error-stddef.h-file-not-found/</id>
        
        <content type="html" xml:base="https://blog.dotone.top/blog/it/rust-bindgen-error-stddef.h-file-not-found/">&lt;p&gt;solution:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-get install clang
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
</feed>
